// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  username     String  @unique
  role         Role    @default(USER)
  password     String
  email        String  @unique
  phone        String?
  refreshToken String?
  avatar       String
  gender       String
  payment      Boolean @default(false)
  company      String?
  location     String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserDoingExam UserDoingExam[]
}

enum Role {
  USER
  ADMIN
  TEACHER
}

model UserDoingExam {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  exam    Exam   @relation(fields: [examId], references: [id])
  examId  String @db.ObjectId
  score   Score  @relation(fields: [scoreId], references: [id])
  scoreId String @db.ObjectId
  result  Json
}

model Score {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  listening     Float
  reading       Float
  speaking      Float
  writting      Float
  overall       Float
  UserDoingExam UserDoingExam[]
}

model Exam {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  duration      Int
  type          String
  isNeedPaid    Boolean         @default(false)
  image         String
  sections      ExamSections?   @relation(fields: [sectionsId], references: [id])
  sectionsId    String          @db.ObjectId
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserDoingExam UserDoingExam[]
}

model ExamSections {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  exam               Exam[]
  listening          ListeningSection @relation(fields: [listeningSectionId], references: [id])
  listeningSectionId String           @db.ObjectId
  reading            ReadingSection?  @relation(fields: [readingSectionId], references: [id])
  readingSectionId   String?          @db.ObjectId
  speaking           SpeakingSection? @relation(fields: [speakingSectionId], references: [id])
  speakingSectionId  String?          @db.ObjectId
  writting           WrittingSection? @relation(fields: [writtingSectionId], references: [id])
  writtingSectionId  String?          @db.ObjectId
}

model ListeningSection {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  audio        String?
  parts        ListeningPart[]
  examSections ExamSections[]
}

model ListeningPart {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String?
  audio              String?
  image              String?
  type               String
  listeningSection   ListeningSection?   @relation(fields: [listeningSectionId], references: [id])
  listeningSectionId String?             @db.ObjectId
  questions          ListeningQuestion[]
}

model ListeningQuestion {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  image           String?
  audio           String?
  listeningPart   ListeningPart?    @relation(fields: [listeningPartId], references: [id])
  listeningPartId String?           @db.ObjectId
  answers         ListeningAnswer[]
}

model ListeningAnswer {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  image               String?
  value               String
  listeningQuestion   ListeningQuestion? @relation(fields: [listeningQuestionId], references: [id])
  listeningQuestionId String?            @db.ObjectId
}

model ReadingSection {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  parts        ReadingPart[]
  examSections ExamSections[]
}

model ReadingPart {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  image            String?
  type             String
  readingSection   ReadingSection?   @relation(fields: [readingSectionId], references: [id])
  readingSectionId String?           @db.ObjectId
  questions        ReadingQuestion[]
}

model ReadingQuestion {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  image         String?
  readingPart   ReadingPart?    @relation(fields: [readingPartId], references: [id])
  readingPartId String?         @db.ObjectId
  answers       ReadingAnswer[]
}

model ReadingAnswer {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  image             String?
  value             String
  readingQuestion   ReadingQuestion? @relation(fields: [readingQuestionId], references: [id])
  readingQuestionId String?          @db.ObjectId
}

model SpeakingSection {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  parts        SpeakingPart[]
  examSections ExamSections[]
}

model SpeakingPart {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  image             String?
  SpeakingSection   SpeakingSection?   @relation(fields: [speakingSectionId], references: [id])
  speakingSectionId String?            @db.ObjectId
  questions         SpeakingQuestion[]
}

model SpeakingQuestion {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  image          String?
  speakingPart   SpeakingPart?    @relation(fields: [speakingPartId], references: [id])
  speakingPartId String?          @db.ObjectId
  answers        SpeakingAnswer[]
}

model SpeakingAnswer {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  audioAnswer        String
  SpeakingQuestion   SpeakingQuestion? @relation(fields: [speakingQuestionId], references: [id])
  speakingQuestionId String?           @db.ObjectId
}

model WrittingSection {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  parts        WrittingPart[]
  examSections ExamSections[]
}

model WrittingPart {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  image             String?
  WrittingSection   WrittingSection?   @relation(fields: [writtingSectionId], references: [id])
  writtingSectionId String?            @db.ObjectId
  questions         WrittingQuestion[]
}

model WrittingQuestion {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  image          String?
  WrittingPart   WrittingPart?    @relation(fields: [writtingPartId], references: [id])
  writtingPartId String?          @db.ObjectId
  answers        WrittingAnswer[]
}

model WrittingAnswer {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  textAnswer         String
  WrittingQuestion   WrittingQuestion? @relation(fields: [writtingQuestionId], references: [id])
  writtingQuestionId String?           @db.ObjectId
}

model Collection {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  image        String?
  vocabularies Vocabulary[]
}

model Vocabulary {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  vocabulary   String
  meaning      String
  image        String?
  spelling     String?
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?     @db.ObjectId
}
